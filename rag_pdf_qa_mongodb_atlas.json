{
  "name": "File Upload",
  "description": "Loads file into a MongoDB vector store",
  "data": {
    "nodes": [
      {
        "id": "RecursiveCharacterTextSplitter-Toleq",
        "type": "genericNode",
        "position": { "x": 611.4452462740019, "y": -191.2242021007728 },
        "data": {
          "type": "RecursiveCharacterTextSplitter",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_overlap": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 200,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_overlap",
                "display_name": "Chunk Overlap",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chunk_size": {
                "type": "int",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 1000,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chunk_size",
                "display_name": "Chunk Size",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "separator_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": [
                  "Text",
                  "c",
                  "cobol",
                  "cpp",
                  "csharp",
                  "go",
                  "html",
                  "java",
                  "js",
                  "kotlin",
                  "latex",
                  "lua",
                  "markdown",
                  "perl",
                  "php",
                  "proto",
                  "python",
                  "rst",
                  "ruby",
                  "rust",
                  "scala",
                  "sol",
                  "swift",
                  "ts"
                ],
                "name": "separator_type",
                "display_name": "Separator Type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "separators": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "\\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "separators",
                "display_name": "Separator",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "RecursiveCharacterTextSplitter"
            },
            "description": "Splitting text by recursively look at characters.",
            "base_classes": ["Document"],
            "display_name": "RecursiveCharacterTextSplitter",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_transformers/recursive_text_splitter",
            "custom_fields": {},
            "output_types": ["Document"],
            "field_formatters": {},
            "beta": false
          },
          "id": "RecursiveCharacterTextSplitter-Toleq"
        },
        "selected": false,
        "width": 384,
        "height": 599,
        "positionAbsolute": { "x": 611.4452462740019, "y": -191.2242021007728 },
        "dragging": false
      },
      {
        "id": "MongoDBAtlasVectorSearch-MB8XJ",
        "type": "genericNode",
        "position": { "x": 1258.9423508460463, "y": -137.52245190343362 },
        "data": {
          "type": "MongoDBAtlasVectorSearch",
          "node": {
            "template": {
              "documents": {
                "type": "Document",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "documents",
                "display_name": "Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "embedding": {
                "type": "Embeddings",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List, Optional\n\nfrom langchain_community.vectorstores.mongodb_atlas import MongoDBAtlasVectorSearch\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import Document, Embeddings, NestedDict\n\n\nclass MongoDBAtlasComponent(CustomComponent):\n    display_name = \"MongoDB Atlas\"\n    description = \"a `MongoDB Atlas Vector Search` vector store from raw documents.\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"collection_name\": {\"display_name\": \"Collection Name\"},\n            \"db_name\": {\"display_name\": \"Database Name\"},\n            \"index_name\": {\"display_name\": \"Index Name\"},\n            \"mongodb_atlas_cluster_uri\": {\"display_name\": \"MongoDB Atlas Cluster URI\"},\n            \"search_kwargs\": {\"display_name\": \"Search Kwargs\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        documents: Optional[List[Document]] = None,\n        collection_name: str = \"\",\n        db_name: str = \"\",\n        index_name: str = \"\",\n        mongodb_atlas_cluster_uri: str = \"\",\n        search_kwargs: Optional[NestedDict] = None,\n    ) -> MongoDBAtlasVectorSearch:\n        search_kwargs = search_kwargs or {}\n        vector_store = MongoDBAtlasVectorSearch.from_connection_string(\n            connection_string=mongodb_atlas_cluster_uri,\n            namespace=f\"{db_name}.{collection_name}\",\n            embedding=embedding,\n            index_name=index_name,\n        )\n\n        if documents is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n\n            vector_store.add_documents(documents)\n\n        return vector_store\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "pdf_text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "display_name": "Collection Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "db_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "vector_search",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "db_name",
                "display_name": "Database Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "index_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "pdf",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "mongodb_atlas_cluster_uri": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "mongodb+srv://<user>:<password>@cluster.projectid.mongodb.net/?retryWrites=true&w=majority&appName=Prod",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "mongodb_atlas_cluster_uri",
                "display_name": "MongoDB Atlas Cluster URI",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "search_kwargs": {
                "type": "NestedDict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "search_kwargs",
                "display_name": "Search Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "a `MongoDB Atlas Vector Search` vector store from raw documents.",
            "base_classes": ["MongoDBAtlasVectorSearch", "VectorStore"],
            "display_name": "MongoDB Atlas",
            "documentation": "",
            "custom_fields": {
              "embedding": null,
              "documents": null,
              "collection_name": null,
              "db_name": null,
              "index_name": null,
              "mongodb_atlas_cluster_uri": null,
              "search_kwargs": null
            },
            "output_types": ["MongoDBAtlasVectorSearch"],
            "field_formatters": {},
            "beta": true
          },
          "id": "MongoDBAtlasVectorSearch-MB8XJ"
        },
        "selected": false,
        "width": 384,
        "height": 773,
        "positionAbsolute": {
          "x": 1258.9423508460463,
          "y": -137.52245190343362
        },
        "dragging": false
      },
      {
        "id": "PyPDFLoader-yCgVG",
        "type": "genericNode",
        "position": { "x": 35.33251691094233, "y": 38.79374038916143 },
        "data": {
          "type": "PyPDFLoader",
          "node": {
            "template": {
              "file_path": {
                "type": "file",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "Driven-to-Distraction-PDFdrive.pdf",
                "fileTypes": [".pdf"],
                "file_path": "/Users/aravind/Library/Caches/langflow/535bb59e-0fb3-4778-b47d-1166e4606003/3aafd592cf372f7a516a121d7f3eb1a5bfefcaecd5978576f787649c6890a24d.pdf",
                "password": false,
                "name": "file_path",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "metadata": {
                "type": "dict",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": [
                  { "Name": "Connectors" },
                  { "UserID": "xyz123456789" }
                ],
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "PyPDFLoader"
            },
            "description": "Load PDF using pypdf into list of documents.",
            "base_classes": ["Document"],
            "display_name": "PyPDFLoader",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf",
            "custom_fields": {},
            "output_types": ["Document"],
            "field_formatters": {},
            "beta": false
          },
          "id": "PyPDFLoader-yCgVG"
        },
        "selected": false,
        "width": 384,
        "height": 417,
        "positionAbsolute": { "x": 35.33251691094233, "y": 38.79374038916143 },
        "dragging": false
      },
      {
        "id": "OllamaEmbeddings-NGZi2",
        "type": "genericNode",
        "position": { "x": 555.6470514833851, "y": 592.4732549782077 },
        "data": {
          "type": "OllamaEmbeddings",
          "node": {
            "template": {
              "base_url": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "http://localhost:11434",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "base_url",
                "display_name": "Ollama Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Optional\n\nfrom langflow import CustomComponent\nfrom langchain.embeddings.base import Embeddings\nfrom langchain_community.embeddings import OllamaEmbeddings\n\n\nclass OllamaEmbeddingsComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing an Embeddings Model using Ollama.\n    \"\"\"\n\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Embeddings model from Ollama.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    beta = True\n\n    def build_config(self):\n        return {\n            \"model\": {\n                \"display_name\": \"Ollama Model\",\n            },\n            \"base_url\": {\"display_name\": \"Ollama Base URL\"},\n            \"temperature\": {\"display_name\": \"Model Temperature\"},\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        model: str = \"llama2\",\n        base_url: str = \"http://localhost:11434\",\n        temperature: Optional[float] = None,\n    ) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=model, base_url=base_url, temperature=temperature)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "nomic-embed-text",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model",
                "display_name": "Ollama Model",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Model Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Embeddings model from Ollama.",
            "base_classes": ["Embeddings"],
            "display_name": "Ollama Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
            "custom_fields": {
              "model": null,
              "base_url": null,
              "temperature": null
            },
            "output_types": ["Embeddings"],
            "field_formatters": {},
            "beta": true
          },
          "id": "OllamaEmbeddings-NGZi2"
        },
        "selected": false,
        "width": 384,
        "height": 555,
        "positionAbsolute": { "x": 555.6470514833851, "y": 592.4732549782077 },
        "dragging": false
      },
      {
        "id": "ChatOllamaEndpoint-9L0rl",
        "type": "genericNode",
        "position": { "x": 1751.1434354783246, "y": 633.5556049436696 },
        "data": {
          "type": "ChatOllamaEndpoint",
          "node": {
            "template": {
              "metadata": {
                "type": "Dict[str, Any]",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": true
              },
              "stop": {
                "type": "list",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "stop",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "List of tokens to signal the model to stop generating text.",
                "title_case": true
              },
              "tags": {
                "type": "list",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Tags to add to the run trace.",
                "title_case": true
              },
              "base_url": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": true,
                "value": "http://localhost:11434"
              },
              "cache": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "cache",
                "display_name": "Cache",
                "advanced": true,
                "dynamic": false,
                "info": "Enable or disable caching.",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict, List, Optional\n\n# from langchain_community.chat_models import ChatOllama\nfrom langchain_community.chat_models import ChatOllama\nfrom langchain_core.language_models.chat_models import BaseChatModel\n\n# from langchain.chat_models import ChatOllama\nfrom langflow import CustomComponent\n\n# whe When a callback component is added to Langflow, the comment must be uncommented.\n# from langchain.callbacks.manager import CallbackManager\n\n\nclass ChatOllamaComponent(CustomComponent):\n    display_name = \"ChatOllama\"\n    description = \"Local LLM for chat with Ollama.\"\n\n    def build_config(self) -> dict:\n        return {\n            \"base_url\": {\n                \"display_name\": \"Base URL\",\n                \"info\": \"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            },\n            \"model\": {\n                \"display_name\": \"Model Name\",\n                \"value\": \"llama2\",\n                \"info\": \"Refer to https://ollama.ai/library for more models.\",\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"value\": 0.8,\n                \"info\": \"Controls the creativity of model responses.\",\n            },\n            \"cache\": {\n                \"display_name\": \"Cache\",\n                \"field_type\": \"bool\",\n                \"info\": \"Enable or disable caching.\",\n                \"advanced\": True,\n                \"value\": False,\n            },\n            ### When a callback component is added to Langflow, the comment must be uncommented. ###\n            # \"callback_manager\": {\n            #     \"display_name\": \"Callback Manager\",\n            #     \"info\": \"Optional callback manager for additional functionality.\",\n            #     \"advanced\": True,\n            # },\n            # \"callbacks\": {\n            #     \"display_name\": \"Callbacks\",\n            #     \"info\": \"Callbacks to execute during model runtime.\",\n            #     \"advanced\": True,\n            # },\n            ########################################################################################\n            \"format\": {\n                \"display_name\": \"Format\",\n                \"field_type\": \"str\",\n                \"info\": \"Specify the format of the output (e.g., json).\",\n                \"advanced\": True,\n            },\n            \"metadata\": {\n                \"display_name\": \"Metadata\",\n                \"info\": \"Metadata to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"mirostat\": {\n                \"display_name\": \"Mirostat\",\n                \"options\": [\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n                \"info\": \"Enable/disable Mirostat sampling for controlling perplexity.\",\n                \"value\": \"Disabled\",\n                \"advanced\": True,\n            },\n            \"mirostat_eta\": {\n                \"display_name\": \"Mirostat Eta\",\n                \"field_type\": \"float\",\n                \"info\": \"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n                \"advanced\": True,\n            },\n            \"mirostat_tau\": {\n                \"display_name\": \"Mirostat Tau\",\n                \"field_type\": \"float\",\n                \"info\": \"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n                \"advanced\": True,\n            },\n            \"num_ctx\": {\n                \"display_name\": \"Context Window Size\",\n                \"field_type\": \"int\",\n                \"info\": \"Size of the context window for generating tokens. (Default: 2048)\",\n                \"advanced\": True,\n            },\n            \"num_gpu\": {\n                \"display_name\": \"Number of GPUs\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n                \"advanced\": True,\n            },\n            \"num_thread\": {\n                \"display_name\": \"Number of Threads\",\n                \"field_type\": \"int\",\n                \"info\": \"Number of threads to use during computation. (Default: detected for optimal performance)\",\n                \"advanced\": True,\n            },\n            \"repeat_last_n\": {\n                \"display_name\": \"Repeat Last N\",\n                \"field_type\": \"int\",\n                \"info\": \"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n                \"advanced\": True,\n            },\n            \"repeat_penalty\": {\n                \"display_name\": \"Repeat Penalty\",\n                \"field_type\": \"float\",\n                \"info\": \"Penalty for repetitions in generated text. (Default: 1.1)\",\n                \"advanced\": True,\n            },\n            \"tfs_z\": {\n                \"display_name\": \"TFS Z\",\n                \"field_type\": \"float\",\n                \"info\": \"Tail free sampling value. (Default: 1)\",\n                \"advanced\": True,\n            },\n            \"timeout\": {\n                \"display_name\": \"Timeout\",\n                \"field_type\": \"int\",\n                \"info\": \"Timeout for the request stream.\",\n                \"advanced\": True,\n            },\n            \"top_k\": {\n                \"display_name\": \"Top K\",\n                \"field_type\": \"int\",\n                \"info\": \"Limits token selection to top K. (Default: 40)\",\n                \"advanced\": True,\n            },\n            \"top_p\": {\n                \"display_name\": \"Top P\",\n                \"field_type\": \"float\",\n                \"info\": \"Works together with top-k. (Default: 0.9)\",\n                \"advanced\": True,\n            },\n            \"verbose\": {\n                \"display_name\": \"Verbose\",\n                \"field_type\": \"bool\",\n                \"info\": \"Whether to print out response text.\",\n            },\n            \"tags\": {\n                \"display_name\": \"Tags\",\n                \"field_type\": \"list\",\n                \"info\": \"Tags to add to the run trace.\",\n                \"advanced\": True,\n            },\n            \"stop\": {\n                \"display_name\": \"Stop Tokens\",\n                \"field_type\": \"list\",\n                \"info\": \"List of tokens to signal the model to stop generating text.\",\n                \"advanced\": True,\n            },\n            \"system\": {\n                \"display_name\": \"System\",\n                \"field_type\": \"str\",\n                \"info\": \"System to use for generating text.\",\n                \"advanced\": True,\n            },\n            \"template\": {\n                \"display_name\": \"Template\",\n                \"field_type\": \"str\",\n                \"info\": \"Template to use for generating text.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        base_url: Optional[str],\n        model: str,\n        mirostat: Optional[str],\n        mirostat_eta: Optional[float] = None,\n        mirostat_tau: Optional[float] = None,\n        ### When a callback component is added to Langflow, the comment must be uncommented.###\n        # callback_manager: Optional[CallbackManager] = None,\n        # callbacks: Optional[List[Callbacks]] = None,\n        #######################################################################################\n        repeat_last_n: Optional[int] = None,\n        verbose: Optional[bool] = None,\n        cache: Optional[bool] = None,\n        num_ctx: Optional[int] = None,\n        num_gpu: Optional[int] = None,\n        format: Optional[str] = None,\n        metadata: Optional[Dict[str, Any]] = None,\n        num_thread: Optional[int] = None,\n        repeat_penalty: Optional[float] = None,\n        stop: Optional[List[str]] = None,\n        system: Optional[str] = None,\n        tags: Optional[List[str]] = None,\n        temperature: Optional[float] = None,\n        template: Optional[str] = None,\n        tfs_z: Optional[float] = None,\n        timeout: Optional[int] = None,\n        top_k: Optional[int] = None,\n        top_p: Optional[int] = None,\n    ) -> BaseChatModel:\n        if not base_url:\n            base_url = \"http://localhost:11434\"\n\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": base_url,\n            \"cache\": cache,\n            \"model\": model,\n            \"mirostat\": mirostat_value,\n            \"format\": format,\n            \"metadata\": metadata,\n            \"tags\": tags,\n            ## When a callback component is added to Langflow, the comment must be uncommented.##\n            # \"callback_manager\": callback_manager,\n            # \"callbacks\": callbacks,\n            #####################################################################################\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": num_ctx,\n            \"num_gpu\": num_gpu,\n            \"num_thread\": num_thread,\n            \"repeat_last_n\": repeat_last_n,\n            \"repeat_penalty\": repeat_penalty,\n            \"temperature\": temperature,\n            \"stop\": stop,\n            \"system\": system,\n            \"template\": template,\n            \"tfs_z\": tfs_z,\n            \"timeout\": timeout,\n            \"top_k\": top_k,\n            \"top_p\": top_p,\n            \"verbose\": verbose,\n        }\n\n        # None Value remove\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "format": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": true
              },
              "mirostat": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "Disabled",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": ["Disabled", "Mirostat", "Mirostat 2.0"],
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "title_case": true
              },
              "mirostat_eta": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "mirostat_tau": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "model": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "llama3:8b",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "model",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "title_case": true
              },
              "num_ctx": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": true
              },
              "num_gpu": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": true
              },
              "num_thread": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": true
              },
              "repeat_last_n": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": true
              },
              "repeat_penalty": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "system": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": true
              },
              "temperature": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": 0.8,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "template": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": true
              },
              "tfs_z": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "timeout": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": true
              },
              "top_k": {
                "type": "int",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": true
              },
              "top_p": {
                "type": "float",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "rangeSpec": { "min": -1, "max": 1, "step": 0.1 },
                "title_case": true
              },
              "verbose": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Local LLM for chat with Ollama.",
            "base_classes": ["BaseLanguageModel", "BaseChatModel"],
            "display_name": "ChatOllama",
            "documentation": "",
            "custom_fields": {
              "base_url": null,
              "model": null,
              "mirostat": null,
              "mirostat_eta": null,
              "mirostat_tau": null,
              "repeat_last_n": null,
              "verbose": null,
              "cache": null,
              "num_ctx": null,
              "num_gpu": null,
              "format": null,
              "metadata": null,
              "num_thread": null,
              "repeat_penalty": null,
              "stop": null,
              "system": null,
              "tags": null,
              "temperature": null,
              "template": null,
              "tfs_z": null,
              "timeout": null,
              "top_k": null,
              "top_p": null
            },
            "output_types": ["BaseChatModel"],
            "field_formatters": {},
            "beta": true
          },
          "id": "ChatOllamaEndpoint-9L0rl"
        },
        "selected": false,
        "width": 384,
        "height": 631,
        "positionAbsolute": { "x": 1751.1434354783246, "y": 633.5556049436696 },
        "dragging": false
      },
      {
        "id": "RetrievalQA-x2VNF",
        "type": "genericNode",
        "position": { "x": 2803.9686195311892, "y": 41.67204922848356 },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "combine_documents_chain": {
                "type": "BaseCombineDocumentsChain",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "combine_documents_chain",
                "display_name": "Combine Documents Chain",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "memory": {
                "type": "BaseMemory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "retriever": {
                "type": "BaseRetriever",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "query",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "display_name": "Input Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "result",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "display_name": "Output Key",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "return_source_documents": {
                "type": "bool",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": true,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_source_documents",
                "display_name": "Return Source Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "Chain for question-answering against an index.",
            "base_classes": ["Chain", "BaseRetrievalQA", "Callable"],
            "display_name": "RetrievalQA",
            "documentation": "",
            "custom_fields": {
              "combine_documents_chain": null,
              "retriever": null,
              "memory": null,
              "input_key": null,
              "output_key": null,
              "return_source_documents": null
            },
            "output_types": ["BaseRetrievalQA", "Callable"],
            "field_formatters": {},
            "beta": true
          },
          "id": "RetrievalQA-x2VNF"
        },
        "selected": false,
        "width": 384,
        "height": 501,
        "positionAbsolute": { "x": 2803.9686195311892, "y": 41.67204922848356 },
        "dragging": false
      },
      {
        "id": "VectorStoreRetriever-gAWDa",
        "type": "genericNode",
        "position": { "x": 1975.6701111141483, "y": -226.89922454241162 },
        "data": {
          "type": "VectorStoreRetriever",
          "node": {
            "template": {
              "vectorstore": {
                "type": "VectorStore",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "vectorstore",
                "display_name": "Vector Store",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.vectorstores import VectorStoreRetriever\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import VectorStore\n\n\nclass VectoStoreRetrieverComponent(CustomComponent):\n    display_name = \"VectorStore Retriever\"\n    description = \"A vector store retriever\"\n\n    def build_config(self):\n        return {\n            \"vectorstore\": {\"display_name\": \"Vector Store\", \"type\": VectorStore},\n        }\n\n    def build(self, vectorstore: VectorStore) -> VectorStoreRetriever:\n        return vectorstore.as_retriever()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": false,
                "dynamic": true,
                "info": "",
                "title_case": true
              },
              "_type": "CustomComponent"
            },
            "description": "A vector store retriever",
            "base_classes": ["BaseRetriever", "VectorStoreRetriever"],
            "display_name": "VectorStore Retriever",
            "documentation": "",
            "custom_fields": { "vectorstore": null },
            "output_types": ["VectorStoreRetriever"],
            "field_formatters": {},
            "beta": true
          },
          "id": "VectorStoreRetriever-gAWDa"
        },
        "selected": false,
        "width": 384,
        "height": 329,
        "positionAbsolute": {
          "x": 1975.6701111141483,
          "y": -226.89922454241162
        },
        "dragging": false
      },
      {
        "id": "CombineDocsChain-yrU7o",
        "type": "genericNode",
        "position": { "x": 2234.518188198125, "y": 637.3831706037057 },
        "data": {
          "type": "CombineDocsChain",
          "node": {
            "template": {
              "llm": {
                "type": "BaseLanguageModel",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "llm",
                "display_name": "LLM",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "chain_type": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "value": "stuff",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "options": ["stuff", "map_reduce", "map_rerank", "refine"],
                "name": "chain_type",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "load_qa_chain"
            },
            "description": "Load question answering chain.",
            "base_classes": ["BaseCombineDocumentsChain", "Callable"],
            "display_name": "CombineDocsChain",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "CombineDocsChain-yrU7o"
        },
        "selected": false,
        "width": 384,
        "height": 333,
        "positionAbsolute": { "x": 2234.518188198125, "y": 637.3831706037057 },
        "dragging": false
      },
      {
        "id": "MongoDBChatMessageHistory-CofpT",
        "type": "genericNode",
        "position": { "x": 1900.5902102210548, "y": 19.53280171918091 },
        "data": {
          "type": "MongoDBChatMessageHistory",
          "node": {
            "template": {
              "collection_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "message_store",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "collection_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "connection_string": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "connection_string",
                "advanced": false,
                "dynamic": false,
                "info": "MongoDB connection string (e.g mongodb://mongo_user:password123@mongo:27017)",
                "title_case": true
              },
              "database_name": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "database_name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "session_id": {
                "type": "str",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "session_id",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "MongoDBChatMessageHistory"
            },
            "description": "Memory store with MongoDB",
            "base_classes": [
              "MongoDBChatMessageHistory",
              "BaseChatMessageHistory"
            ],
            "display_name": "MongoDBChatMessageHistory",
            "documentation": "https://python.langchain.com/docs/modules/memory/integrations/mongodb_chat_message_history",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "MongoDBChatMessageHistory-CofpT"
        },
        "selected": false,
        "width": 384,
        "height": 571,
        "positionAbsolute": { "x": 1900.5902102210548, "y": 19.53280171918091 },
        "dragging": false
      },
      {
        "id": "ConversationBufferMemory-aNrWv",
        "type": "genericNode",
        "position": { "x": 2342.5387588143685, "y": 9.11650596108933 },
        "data": {
          "type": "ConversationBufferMemory",
          "node": {
            "template": {
              "chat_memory": {
                "type": "BaseChatMessageHistory",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "password": false,
                "name": "chat_memory",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "ai_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "AI",
                "fileTypes": [],
                "password": false,
                "name": "ai_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "human_prefix": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": false,
                "multiline": false,
                "value": "Human",
                "fileTypes": [],
                "password": false,
                "name": "human_prefix",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "input_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Input when more than one variable is available.",
                "title_case": true
              },
              "memory_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "chat_history",
                "fileTypes": [],
                "password": false,
                "name": "memory_key",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "output_key": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "output_key",
                "advanced": false,
                "dynamic": false,
                "info": "The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)",
                "title_case": true
              },
              "return_messages": {
                "type": "bool",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "return_messages",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": true
              },
              "_type": "ConversationBufferMemory"
            },
            "description": "Buffer for storing conversation memory.",
            "base_classes": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "display_name": "ConversationBufferMemory",
            "documentation": "https://python.langchain.com/docs/modules/memory/how_to/buffer",
            "custom_fields": {},
            "output_types": [],
            "field_formatters": {},
            "beta": false
          },
          "id": "ConversationBufferMemory-aNrWv"
        },
        "selected": true,
        "width": 384,
        "height": 601,
        "positionAbsolute": { "x": 2342.5387588143685, "y": 9.11650596108933 },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "RecursiveCharacterTextSplitter-Toleq",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-Toleqœ}",
        "target": "MongoDBAtlasVectorSearch-MB8XJ",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "MongoDBAtlasVectorSearch-MB8XJ",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-Toleq"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-Toleq{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-Toleqœ}-MongoDBAtlasVectorSearch-MB8XJ{œfieldNameœ:œdocumentsœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "PyPDFLoader-yCgVG",
        "sourceHandle": "{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-yCgVGœ}",
        "target": "RecursiveCharacterTextSplitter-Toleq",
        "targetHandle": "{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-Toleqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}",
        "data": {
          "targetHandle": {
            "fieldName": "documents",
            "id": "RecursiveCharacterTextSplitter-Toleq",
            "inputTypes": null,
            "type": "Document"
          },
          "sourceHandle": {
            "baseClasses": ["Document"],
            "dataType": "PyPDFLoader",
            "id": "PyPDFLoader-yCgVG"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-gray-900  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-PyPDFLoader-yCgVG{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œPyPDFLoaderœ,œidœ:œPyPDFLoader-yCgVGœ}-RecursiveCharacterTextSplitter-Toleq{œfieldNameœ:œdocumentsœ,œidœ:œRecursiveCharacterTextSplitter-Toleqœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"
      },
      {
        "source": "OllamaEmbeddings-NGZi2",
        "sourceHandle": "{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-NGZi2œ}",
        "target": "MongoDBAtlasVectorSearch-MB8XJ",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "MongoDBAtlasVectorSearch-MB8XJ",
            "inputTypes": null,
            "type": "Embeddings"
          },
          "sourceHandle": {
            "baseClasses": ["Embeddings"],
            "dataType": "OllamaEmbeddings",
            "id": "OllamaEmbeddings-NGZi2"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-OllamaEmbeddings-NGZi2{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-NGZi2œ}-MongoDBAtlasVectorSearch-MB8XJ{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"
      },
      {
        "source": "VectorStoreRetriever-gAWDa",
        "sourceHandle": "{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-gAWDaœ}",
        "target": "RetrievalQA-x2VNF",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-x2VNF",
            "inputTypes": null,
            "type": "BaseRetriever"
          },
          "sourceHandle": {
            "baseClasses": ["BaseRetriever", "VectorStoreRetriever"],
            "dataType": "VectorStoreRetriever",
            "id": "VectorStoreRetriever-gAWDa"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-VectorStoreRetriever-gAWDa{œbaseClassesœ:[œBaseRetrieverœ,œVectorStoreRetrieverœ],œdataTypeœ:œVectorStoreRetrieverœ,œidœ:œVectorStoreRetriever-gAWDaœ}-RetrievalQA-x2VNF{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"
      },
      {
        "source": "MongoDBAtlasVectorSearch-MB8XJ",
        "sourceHandle": "{œbaseClassesœ:[œMongoDBAtlasVectorSearchœ,œVectorStoreœ],œdataTypeœ:œMongoDBAtlasVectorSearchœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ}",
        "target": "VectorStoreRetriever-gAWDa",
        "targetHandle": "{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-gAWDaœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}",
        "data": {
          "targetHandle": {
            "fieldName": "vectorstore",
            "id": "VectorStoreRetriever-gAWDa",
            "inputTypes": null,
            "type": "VectorStore"
          },
          "sourceHandle": {
            "baseClasses": ["MongoDBAtlasVectorSearch", "VectorStore"],
            "dataType": "MongoDBAtlasVectorSearch",
            "id": "MongoDBAtlasVectorSearch-MB8XJ"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-MongoDBAtlasVectorSearch-MB8XJ{œbaseClassesœ:[œMongoDBAtlasVectorSearchœ,œVectorStoreœ],œdataTypeœ:œMongoDBAtlasVectorSearchœ,œidœ:œMongoDBAtlasVectorSearch-MB8XJœ}-VectorStoreRetriever-gAWDa{œfieldNameœ:œvectorstoreœ,œidœ:œVectorStoreRetriever-gAWDaœ,œinputTypesœ:null,œtypeœ:œVectorStoreœ}"
      },
      {
        "source": "ChatOllamaEndpoint-9L0rl",
        "sourceHandle": "{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ],œdataTypeœ:œChatOllamaEndpointœ,œidœ:œChatOllamaEndpoint-9L0rlœ}",
        "target": "CombineDocsChain-yrU7o",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-yrU7oœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "CombineDocsChain-yrU7o",
            "inputTypes": null,
            "type": "BaseLanguageModel"
          },
          "sourceHandle": {
            "baseClasses": ["BaseLanguageModel", "BaseChatModel"],
            "dataType": "ChatOllamaEndpoint",
            "id": "ChatOllamaEndpoint-9L0rl"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ChatOllamaEndpoint-9L0rl{œbaseClassesœ:[œBaseLanguageModelœ,œBaseChatModelœ],œdataTypeœ:œChatOllamaEndpointœ,œidœ:œChatOllamaEndpoint-9L0rlœ}-CombineDocsChain-yrU7o{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-yrU7oœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"
      },
      {
        "source": "CombineDocsChain-yrU7o",
        "sourceHandle": "{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-yrU7oœ}",
        "target": "RetrievalQA-x2VNF",
        "targetHandle": "{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}",
        "data": {
          "targetHandle": {
            "fieldName": "combine_documents_chain",
            "id": "RetrievalQA-x2VNF",
            "inputTypes": null,
            "type": "BaseCombineDocumentsChain"
          },
          "sourceHandle": {
            "baseClasses": ["BaseCombineDocumentsChain", "Callable"],
            "dataType": "CombineDocsChain",
            "id": "CombineDocsChain-yrU7o"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-CombineDocsChain-yrU7o{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-yrU7oœ}-RetrievalQA-x2VNF{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}"
      },
      {
        "source": "MongoDBChatMessageHistory-CofpT",
        "sourceHandle": "{œbaseClassesœ:[œMongoDBChatMessageHistoryœ,œBaseChatMessageHistoryœ],œdataTypeœ:œMongoDBChatMessageHistoryœ,œidœ:œMongoDBChatMessageHistory-CofpTœ}",
        "target": "ConversationBufferMemory-aNrWv",
        "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œConversationBufferMemory-aNrWvœ,œinputTypesœ:null,œtypeœ:œBaseChatMessageHistoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "chat_memory",
            "id": "ConversationBufferMemory-aNrWv",
            "inputTypes": null,
            "type": "BaseChatMessageHistory"
          },
          "sourceHandle": {
            "baseClasses": [
              "MongoDBChatMessageHistory",
              "BaseChatMessageHistory"
            ],
            "dataType": "MongoDBChatMessageHistory",
            "id": "MongoDBChatMessageHistory-CofpT"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-MongoDBChatMessageHistory-CofpT{œbaseClassesœ:[œMongoDBChatMessageHistoryœ,œBaseChatMessageHistoryœ],œdataTypeœ:œMongoDBChatMessageHistoryœ,œidœ:œMongoDBChatMessageHistory-CofpTœ}-ConversationBufferMemory-aNrWv{œfieldNameœ:œchat_memoryœ,œidœ:œConversationBufferMemory-aNrWvœ,œinputTypesœ:null,œtypeœ:œBaseChatMessageHistoryœ}"
      },
      {
        "source": "ConversationBufferMemory-aNrWv",
        "sourceHandle": "{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-aNrWvœ}",
        "target": "RetrievalQA-x2VNF",
        "targetHandle": "{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}",
        "data": {
          "targetHandle": {
            "fieldName": "memory",
            "id": "RetrievalQA-x2VNF",
            "inputTypes": null,
            "type": "BaseMemory"
          },
          "sourceHandle": {
            "baseClasses": [
              "BaseMemory",
              "ConversationBufferMemory",
              "BaseChatMemory"
            ],
            "dataType": "ConversationBufferMemory",
            "id": "ConversationBufferMemory-aNrWv"
          }
        },
        "style": { "stroke": "#555" },
        "className": "stroke-foreground  stroke-connection",
        "animated": false,
        "id": "reactflow__edge-ConversationBufferMemory-aNrWv{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-aNrWvœ}-RetrievalQA-x2VNF{œfieldNameœ:œmemoryœ,œidœ:œRetrievalQA-x2VNFœ,œinputTypesœ:null,œtypeœ:œBaseMemoryœ}"
      }
    ],
    "viewport": {
      "x": -858.2421003131069,
      "y": 62.271927346133424,
      "zoom": 0.6720239289060385
    }
  },
  "is_component": false,
  "updated_at": "2024-06-05T09:13:33.378106",
  "folder": null,
  "id": "535bb59e-0fb3-4778-b47d-1166e4606003",
  "user_id": "f4453144-cca8-4bb7-bfa8-82b4ea0d357f"
}
